# Copyright 2024 IBM Corp.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from proto.code_interpreter.v1 import code_interpreter_service_pb2 as proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2


class CodeInterpreterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Execute = channel.unary_unary(
                '/code_interpreter.v1.CodeInterpreterService/Execute',
                request_serializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteRequest.SerializeToString,
                response_deserializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteResponse.FromString,
                )
        self.ParseCustomTool = channel.unary_unary(
                '/code_interpreter.v1.CodeInterpreterService/ParseCustomTool',
                request_serializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ParseCustomToolRequest.SerializeToString,
                response_deserializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ParseCustomToolResponse.FromString,
                )
        self.ExecuteCustomTool = channel.unary_unary(
                '/code_interpreter.v1.CodeInterpreterService/ExecuteCustomTool',
                request_serializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteCustomToolRequest.SerializeToString,
                response_deserializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteCustomToolResponse.FromString,
                )


class CodeInterpreterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Execute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ParseCustomTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCustomTool(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CodeInterpreterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Execute': grpc.unary_unary_rpc_method_handler(
                    servicer.Execute,
                    request_deserializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteRequest.FromString,
                    response_serializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteResponse.SerializeToString,
            ),
            'ParseCustomTool': grpc.unary_unary_rpc_method_handler(
                    servicer.ParseCustomTool,
                    request_deserializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ParseCustomToolRequest.FromString,
                    response_serializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ParseCustomToolResponse.SerializeToString,
            ),
            'ExecuteCustomTool': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCustomTool,
                    request_deserializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteCustomToolRequest.FromString,
                    response_serializer=proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteCustomToolResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'code_interpreter.v1.CodeInterpreterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CodeInterpreterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Execute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/code_interpreter.v1.CodeInterpreterService/Execute',
            proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteRequest.SerializeToString,
            proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ParseCustomTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/code_interpreter.v1.CodeInterpreterService/ParseCustomTool',
            proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ParseCustomToolRequest.SerializeToString,
            proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ParseCustomToolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteCustomTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/code_interpreter.v1.CodeInterpreterService/ExecuteCustomTool',
            proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteCustomToolRequest.SerializeToString,
            proto_dot_code__interpreter_dot_v1_dot_code__interpreter__service__pb2.ExecuteCustomToolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
