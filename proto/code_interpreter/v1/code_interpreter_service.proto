// Copyright 2024 IBM Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package code_interpreter.v1;

import "buf/validate/validate.proto";

service CodeInterpreterService {
  rpc Execute(ExecuteRequest) returns (ExecuteResponse);
  rpc ParseCustomTool(ParseCustomToolRequest) returns (ParseCustomToolResponse);
  rpc ExecuteCustomTool(ExecuteCustomToolRequest) returns (ExecuteCustomToolResponse);
}

message ExecuteRequest {
  string executor_id = 1 [(buf.validate.field).string.pattern = "^[a-z0-9-]{1,32}$"];
  string source_code = 2;
  map<string, string> files = 3 [(buf.validate.field).map = {
    keys: { string: { pattern: "^/[^/].*$" } }
    values: { string: { pattern: "^[0-9a-zA-Z_-]{1,255}$" } }
  }];
}

message ExecuteResponse {
  string stdout = 1;
  string stderr = 2;
  int32 exit_code = 3;
  map<string, string> files = 4 [(buf.validate.field).map = {
    keys: { string: { pattern: "^/[^/].*$" } }
    values: { string: { pattern: "^[0-9a-zA-Z_-]{1,255}$" } }
  }];
}

message ParseCustomToolRequest {
  string tool_source_code = 1;
}

message ParseCustomToolResponseSuccess {
  string tool_name = 1;
  string tool_description = 2;
  string tool_input_schema_json = 3;
}

message ParseCustomToolResponseError {
  repeated string error_messages = 1;
}

message ParseCustomToolResponse {
  oneof response {
    ParseCustomToolResponseSuccess success = 1;
    ParseCustomToolResponseError error = 2;
  }
}

message ExecuteCustomToolRequest {
  string executor_id = 1 [(buf.validate.field).string.pattern = "^[a-z0-9-]{1,32}$"];
  string tool_source_code = 2;
  string tool_input_json = 3;
}

message ExecuteCustomToolResponseSuccess {
  string tool_output_json = 1;
}

message ExecuteCustomToolResponseError {
  string stderr = 1;
}

message ExecuteCustomToolResponse {
  oneof response {
    ExecuteCustomToolResponseSuccess success = 1;
    ExecuteCustomToolResponseError error = 2;
  }
}
