// Copyright 2024 IBM Corp.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file proto/code_interpreter/v1/code_interpreter_service.proto (package code_interpreter.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message code_interpreter.v1.ExecuteRequest
 */
export class ExecuteRequest extends Message<ExecuteRequest> {
  /**
   * @generated from field: string source_code = 2;
   */
  sourceCode = "";

  /**
   * @generated from field: map<string, string> files = 3;
   */
  files: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ExecuteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ExecuteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "source_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "files", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteRequest {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined, b: ExecuteRequest | PlainMessage<ExecuteRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteRequest, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ExecuteResponse
 */
export class ExecuteResponse extends Message<ExecuteResponse> {
  /**
   * @generated from field: string stdout = 1;
   */
  stdout = "";

  /**
   * @generated from field: string stderr = 2;
   */
  stderr = "";

  /**
   * @generated from field: int32 exit_code = 3;
   */
  exitCode = 0;

  /**
   * @generated from field: map<string, string> files = 4;
   */
  files: { [key: string]: string } = {};

  constructor(data?: PartialMessage<ExecuteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ExecuteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stdout", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stderr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "exit_code", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "files", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteResponse {
    return new ExecuteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined, b: ExecuteResponse | PlainMessage<ExecuteResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteResponse, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ParseCustomToolRequest
 */
export class ParseCustomToolRequest extends Message<ParseCustomToolRequest> {
  /**
   * @generated from field: string tool_source_code = 1;
   */
  toolSourceCode = "";

  constructor(data?: PartialMessage<ParseCustomToolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ParseCustomToolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool_source_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseCustomToolRequest {
    return new ParseCustomToolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseCustomToolRequest {
    return new ParseCustomToolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseCustomToolRequest {
    return new ParseCustomToolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ParseCustomToolRequest | PlainMessage<ParseCustomToolRequest> | undefined, b: ParseCustomToolRequest | PlainMessage<ParseCustomToolRequest> | undefined): boolean {
    return proto3.util.equals(ParseCustomToolRequest, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ParseCustomToolResponseSuccess
 */
export class ParseCustomToolResponseSuccess extends Message<ParseCustomToolResponseSuccess> {
  /**
   * @generated from field: string tool_name = 1;
   */
  toolName = "";

  /**
   * @generated from field: string tool_description = 2;
   */
  toolDescription = "";

  /**
   * @generated from field: string tool_input_schema_json = 3;
   */
  toolInputSchemaJson = "";

  constructor(data?: PartialMessage<ParseCustomToolResponseSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ParseCustomToolResponseSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tool_description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tool_input_schema_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseCustomToolResponseSuccess {
    return new ParseCustomToolResponseSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseCustomToolResponseSuccess {
    return new ParseCustomToolResponseSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseCustomToolResponseSuccess {
    return new ParseCustomToolResponseSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: ParseCustomToolResponseSuccess | PlainMessage<ParseCustomToolResponseSuccess> | undefined, b: ParseCustomToolResponseSuccess | PlainMessage<ParseCustomToolResponseSuccess> | undefined): boolean {
    return proto3.util.equals(ParseCustomToolResponseSuccess, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ParseCustomToolResponseError
 */
export class ParseCustomToolResponseError extends Message<ParseCustomToolResponseError> {
  /**
   * @generated from field: repeated string error_messages = 1;
   */
  errorMessages: string[] = [];

  constructor(data?: PartialMessage<ParseCustomToolResponseError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ParseCustomToolResponseError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "error_messages", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseCustomToolResponseError {
    return new ParseCustomToolResponseError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseCustomToolResponseError {
    return new ParseCustomToolResponseError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseCustomToolResponseError {
    return new ParseCustomToolResponseError().fromJsonString(jsonString, options);
  }

  static equals(a: ParseCustomToolResponseError | PlainMessage<ParseCustomToolResponseError> | undefined, b: ParseCustomToolResponseError | PlainMessage<ParseCustomToolResponseError> | undefined): boolean {
    return proto3.util.equals(ParseCustomToolResponseError, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ParseCustomToolResponse
 */
export class ParseCustomToolResponse extends Message<ParseCustomToolResponse> {
  /**
   * @generated from oneof code_interpreter.v1.ParseCustomToolResponse.response
   */
  response: {
    /**
     * @generated from field: code_interpreter.v1.ParseCustomToolResponseSuccess success = 1;
     */
    value: ParseCustomToolResponseSuccess;
    case: "success";
  } | {
    /**
     * @generated from field: code_interpreter.v1.ParseCustomToolResponseError error = 2;
     */
    value: ParseCustomToolResponseError;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ParseCustomToolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ParseCustomToolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "message", T: ParseCustomToolResponseSuccess, oneof: "response" },
    { no: 2, name: "error", kind: "message", T: ParseCustomToolResponseError, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseCustomToolResponse {
    return new ParseCustomToolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseCustomToolResponse {
    return new ParseCustomToolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseCustomToolResponse {
    return new ParseCustomToolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParseCustomToolResponse | PlainMessage<ParseCustomToolResponse> | undefined, b: ParseCustomToolResponse | PlainMessage<ParseCustomToolResponse> | undefined): boolean {
    return proto3.util.equals(ParseCustomToolResponse, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ExecuteCustomToolRequest
 */
export class ExecuteCustomToolRequest extends Message<ExecuteCustomToolRequest> {
  /**
   * @generated from field: string tool_source_code = 2;
   */
  toolSourceCode = "";

  /**
   * @generated from field: string tool_input_json = 3;
   */
  toolInputJson = "";

  constructor(data?: PartialMessage<ExecuteCustomToolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ExecuteCustomToolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "tool_source_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tool_input_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteCustomToolRequest {
    return new ExecuteCustomToolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteCustomToolRequest {
    return new ExecuteCustomToolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteCustomToolRequest {
    return new ExecuteCustomToolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteCustomToolRequest | PlainMessage<ExecuteCustomToolRequest> | undefined, b: ExecuteCustomToolRequest | PlainMessage<ExecuteCustomToolRequest> | undefined): boolean {
    return proto3.util.equals(ExecuteCustomToolRequest, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ExecuteCustomToolResponseSuccess
 */
export class ExecuteCustomToolResponseSuccess extends Message<ExecuteCustomToolResponseSuccess> {
  /**
   * @generated from field: string tool_output_json = 1;
   */
  toolOutputJson = "";

  constructor(data?: PartialMessage<ExecuteCustomToolResponseSuccess>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ExecuteCustomToolResponseSuccess";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tool_output_json", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteCustomToolResponseSuccess {
    return new ExecuteCustomToolResponseSuccess().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteCustomToolResponseSuccess {
    return new ExecuteCustomToolResponseSuccess().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteCustomToolResponseSuccess {
    return new ExecuteCustomToolResponseSuccess().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteCustomToolResponseSuccess | PlainMessage<ExecuteCustomToolResponseSuccess> | undefined, b: ExecuteCustomToolResponseSuccess | PlainMessage<ExecuteCustomToolResponseSuccess> | undefined): boolean {
    return proto3.util.equals(ExecuteCustomToolResponseSuccess, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ExecuteCustomToolResponseError
 */
export class ExecuteCustomToolResponseError extends Message<ExecuteCustomToolResponseError> {
  /**
   * @generated from field: string stderr = 1;
   */
  stderr = "";

  constructor(data?: PartialMessage<ExecuteCustomToolResponseError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ExecuteCustomToolResponseError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stderr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteCustomToolResponseError {
    return new ExecuteCustomToolResponseError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteCustomToolResponseError {
    return new ExecuteCustomToolResponseError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteCustomToolResponseError {
    return new ExecuteCustomToolResponseError().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteCustomToolResponseError | PlainMessage<ExecuteCustomToolResponseError> | undefined, b: ExecuteCustomToolResponseError | PlainMessage<ExecuteCustomToolResponseError> | undefined): boolean {
    return proto3.util.equals(ExecuteCustomToolResponseError, a, b);
  }
}

/**
 * @generated from message code_interpreter.v1.ExecuteCustomToolResponse
 */
export class ExecuteCustomToolResponse extends Message<ExecuteCustomToolResponse> {
  /**
   * @generated from oneof code_interpreter.v1.ExecuteCustomToolResponse.response
   */
  response: {
    /**
     * @generated from field: code_interpreter.v1.ExecuteCustomToolResponseSuccess success = 1;
     */
    value: ExecuteCustomToolResponseSuccess;
    case: "success";
  } | {
    /**
     * @generated from field: code_interpreter.v1.ExecuteCustomToolResponseError error = 2;
     */
    value: ExecuteCustomToolResponseError;
    case: "error";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ExecuteCustomToolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "code_interpreter.v1.ExecuteCustomToolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "message", T: ExecuteCustomToolResponseSuccess, oneof: "response" },
    { no: 2, name: "error", kind: "message", T: ExecuteCustomToolResponseError, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecuteCustomToolResponse {
    return new ExecuteCustomToolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecuteCustomToolResponse {
    return new ExecuteCustomToolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecuteCustomToolResponse {
    return new ExecuteCustomToolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ExecuteCustomToolResponse | PlainMessage<ExecuteCustomToolResponse> | undefined, b: ExecuteCustomToolResponse | PlainMessage<ExecuteCustomToolResponse> | undefined): boolean {
    return proto3.util.equals(ExecuteCustomToolResponse, a, b);
  }
}

